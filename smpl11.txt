#include <math.h>
#include <vector>
#include <list>
#include <set>
#include <stdlib.h>
#include <time.h>
#include <iostream>

namespace x_hash
{


struct tok_type
{
  size_t count_;
  char token_;
  
  tok_type(size_t count,char _tk):count_(count),token_(_tk)
  {}
  
 
  unsigned long 
  rehasher(unsigned long x_)
  {
 
     unsigned long pw = pow(P(x_),0.5);
     unsigned long hx_ = ( P(token_) + (P(++token_) )+( P(token_) ) + pw );
    // printf("rehasher::pw=%zd\n",pw);
     return (hx_); 
  }

private:
  size_t P(size_t index)
  {
   size_t table_[300] ={ 
    648687483  ,683824344 ,1495049347,  709689785 , 1222405562, 1881988445, 134270440 , 1981503013, 205812075 , 112108094 ,
    1662636853 ,557232430 ,996216384 ,  1984887188, 1070103423, 950841699 , 1530098776, 1253449776, 960968108 , 1651253500,
    1900641    ,1747571880,1965510065,  2016171082, 1581591246, 23838492  , 2128279176, 746701910 , 235138301 , 724210199 ,
    1152468888 ,1719223625,31897183  ,  535084016 , 825189753 , 992865291 , 38853868  , 1208671906, 1516388664, 2027679489,
    144220300  ,1587041638,1870014356,  125015829 , 186259900 , 2105152657, 849226028 , 81219492  , 1757581152, 941113800 ,
    1987163734 ,419360198 ,504085975 ,  1048351992, 1935748862, 384281817 , 845496170 , 329381087 , 789643976 , 726161969, 
    1158155504 ,1264885810,1724902827,  2063598916, 151121214 , 1435649504, 1289977686, 943446657 , 1555148503, 19024482406,
    395218644  ,1770020189,453328422 ,  1565328590, 1919870484, 404247283 , 1088681576, 723024698 , 165343495 , 1870833484,
    1704336688 ,54329348  ,972021821 ,  1419548525, 1212484853, 89423983  , 996967704 , 1128600121, 240545197 , 285133561,
    271094160  ,1183991855,1840282064,  26058752  , 439097819 , 507494165 , 319736765 , 1592252584, 1229642666, 77725806,
    901846733,	1350327038,	511864511,	2057396807,	453358948,	551451797,	1989559578,	523378650,	42704248,	743858051,	
    2076877956,	830207343,	212070823,	273838835,	534447875,	616487613,	135175892,	1032862534,	1500135321,	507889226,	
    1623671315,	214432967,	1204224940,	635951557,	509571444,	784827482,	1805449009,	1932759125,	1418459153,	1603126275,	
    1503532111,	172822239,	805969665,	2015396622,	82735398,	1259328613,	419364771,	2072294976,	1782707263,	462069019,	
    668669379,	1712101572,	1292276362,	880740203,	1985940407,	1826724237,	1497227816,	2121116299,	712103123,	849879489,	
    481521877,	188290791,	1064312456,	1685746817,	824242348,	1573883900,	323090651,	482207709,	1359159378,	1741549805,	
    2085333984,	715207841,	1914372044,	743820001,	583120815,	1997107442,	2003148615,	1002485586,	1921918771,	1638372230,	
    1464554605,	443104502,	1202990154,	609347320,	1323844705,	1041446914,	288587909,	673588873,	1015079565,	1000691033,	
    1523468363,	1496601443,	1188981824,	440297171,	1034864612,	2013224172,	2014181072,	1357955264,	347948234,	1225856802,	
    952021421,	285798570,	1941064643,	718909817,	1029618572,	376701810,	568533611,	885283539,	1379187396,	342968734,	
    1202247027,	1153705741,	1496437265,	1861351098,	2061145030,	323046766,	1330408535,	1438253481,	244460024,	1191419099,	
    523221304,	1790419031,	713859650,	527813813,	910285033,	514045030,	1851150674,	387412021,	297831344,	384676922,	
    1249908983,	1596457327,	695709174,	72129211,	421832801,	1474366154,	1856586237,	1733406508,	1198110860,	422672039,	
    1053959942,	252874239,	1576377781,	402913559,	2114225337,	1490039163,	725960325,	1297150224,	780808996,	970420349,	
    341085676,	1304030300,	613355732,	1054945326,	1831844113,	1523640766,	1568990356,	1535511140,	1911052787,	1866821700,	
    1920188062,	1013478123,	1315795379,	468413588,	1085607334,	1737628181,	1942779743,	794709924,	1323551041,	993406955,	
    1217381963,	230027336,	1246281195,	646276096,	632940895,	1213022884,	2136315260,	1358901221,	362689461,	769640608,	
    181837922,	703775137,	2073670909,	795193655,	1758720463,	1758031374,	171350773,	1180227171,	1146058866,	2082403560,	
    899565223,	918763281,	948398035,	67876954,	1387176869,	2034005370,	1805505135,	1182472964,	681231646,	981572529,	
    28396272,	1898613609,	1211599865,	1274677467,	397406058,	1844540760,	340216703,	386237670,	1055958333,	702906164	};
    if (index > 300) index = 210;
    return (table_[index]);
  }  
};

 unsigned long g_hash(unsigned char tk,const size_t& count,const size_t& index)
 {
   tok_type t_obj(count,tk);
   unsigned long hash_ = t_obj.rehasher(index);
   return (hash_);
 }
}

	struct x_count
	{
	    unsigned char token_;	
		size_t count_;
		size_t hash_;
		x_count(){};            
		x_count(unsigned char tk,size_t count,size_t index):
			token_(tk),count_(count)
						{
						    hash_ = x_hash::g_hash(tk,count,index);
			}


		size_t hash(size_t index) const
		{
		   return (hash_);
		}
	};

template
<
  typename T
>
struct adapter
{
    adapter(const T& t):t_(t),j(0),hx_(hash(t_))
    {}
    
    adapter(const adapter<T>& a_):t_(a_.t_),hx_(hash(a_.t_))
    {}

    bool hash(const T& t_) const
    {
      static size_t acc_ = 0;    
      size_t j = 0;
      for (unsigned char i=0;i<t_.token_;++i)
      {
        j += ((t_.token_ % 10)==9);
        j += ((t_.token_ % 3) ==2);
        j += ((t_.token_ % 2)==1);
        j += (j==0);

      }
     // printf("j = %zd\n",j);
      hx_ = x_hash::g_hash(j,t_.token_,j );
     // ++acc_;
      printf("hx=%zd ,tk=%d,count=%zd, j=%zd\n",hx_,t_.token_,t_.count_,j);
      printf("hx_ = %zd\n",hx_);
        
    }

    bool operator > (const adapter<T>& a_) const 
   {
     return ( hash() > a_.hash() );  
   }
 
   bool operator < (const adapter<T>& a_) const
   {
     return ( hash() < a_.hash() );  
   }
 
   bool operator == (const adapter<T>& a_)  const
   {
     return ( hash() == a_.hash() );  
   }
 
   unsigned long 
   hash(void) const
   {
     hx_ = rehash();  
    // printf("!!!hx_ = %zd\n",hx_);  
     return (hx_);
   } 

   unsigned long 
   rehash(void) const
   {
     hash(t_);    
    // printf("rehash::[hx == %zd]",hx_);
     return (hx_);    
   }
  size_t j;
  mutable  unsigned long hx_;
  T t_;
 // static size_t acc_;
      
  
};

/*
template
<
  typename T
>
size_t adapter<T>::acc_ = 0;

template
<
  typename T
>
size_t adapter<T>::j = 0;
*/

template 
<
 typename T
>
struct Less_ : public std::binary_function<adapter<T>, adapter<T>, bool> {
    bool operator()(const adapter<T>& lhs,const  adapter<T>& rhs) const
    {
        return !(lhs == rhs) && (lhs < rhs);
    }
};


int main(void)
{
//std::list< adapter<x_count> >  seq;
 std::set<  adapter<x_count> , Less_<x_count> > s_a;
 for (unsigned char i=0;i<180;++i) 
 {
   s_a.insert((adapter<x_count>(x_count(i,0,1))));
 }

 adapter<x_count> tst(x_count(45,0,1));
 //printf("[xh_ == %zd]",tst.hash());
 std::set<  adapter<x_count> , Less_<x_count> >::iterator found_ = s_a.find(tst);
 if (found_!=s_a.end())
 {
     printf("found s_a.hash()==%zd\n",found_->hash());
      printf("!!!!!!!!!!!!!!size = %zd\n" , s_a.size());
 }

 return (0);   
}
