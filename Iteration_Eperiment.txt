/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <vector>
#include <list>
#include <algorithm>

struct x_token_count
{
  x_token_count (char token, size_t count)
  :token_ (token), count_ (count){}
  
  
  friend bool operator==(const x_token_count& larg,const x_token_count& rarg);
  
  char token_;
  size_t count_;
};

bool operator==(const x_token_count& larg,const x_token_count& rarg)
{
    bool ret_ = false;
    if ((larg.token_ == rarg.token_)&&(larg.count_ == rarg.count_))
    {
      ret_ = true;    
      printf("[%c,%zd]:[%c,%zd]\n",larg.token_,larg.count_,rarg.token_,rarg.count_);
    }
    return (ret_);
}

template
<
  typename T
>
struct find_type:public std::unary_function
< T , bool >
{
    find_type(const T& t_):_t(t_)
    {}

    bool operator()(const T& obj)
    {
      return(_t == obj) ; 
    }
    T _t;
};

struct measure
{
    measure():start(clock()){}
    
    ~measure()
    {
      end = clock();
      times = (double)(end - start);
    }
    
    static 
    double
    get_times(void)
    { return (times); }
    
    clock_t end;
    clock_t start;
    static double times;
};
double measure::times;




template
<
  typename T
>
struct find_adapter
{
  find_adapter(const T& t):t_(t){}    
//  find_adapter(const find_adapter<T>& fa)t_(fa.t_)
//  {}
//  const find_adapter<T>& operator=(const find_adapte<T>r&)
  bool operator()(const T& in)
  {
     return ( t_==in ); 
  }
T t_;   
};

template
<
    typename T
>
void our_find_if(typename T::iterator beg_,
	typename T::iterator end_,typename T::value_type val)
{
  size_t count_ = 0;    
  while (true)
  {
    if (beg_ == end_)
      break;
    
   // if (*beg_ == val)
//    {
 //    printf("%c:%zd\n",beg_->token_,beg_->count_);
 //    break;
        
 //   }
    
 //   if (*end_ == val) 
 //   {
 //    printf("%c:%zd\n",beg_->token_,beg_->count_);
 //   break;
 //       
 //   }
    ++count_;
    ++beg_;
    --end_;
  }
 printf("count_ = %zd",count_);
}



int main ()
{
  std::list< x_token_count > xtcs;
  for (size_t i = 0;i<10000000;++i)
  {
    xtcs.push_back (x_token_count ('"', i));
  }
 // xtcs.push_back (x_token_count ('8', 1020));
 // for (size_t i = 0;i<100000;++i)
 // {
 //   xtcs.push_back (x_token_count ('"', i));
 // }
  {
    measure ms;
    our_find_if<std::list < x_token_count > >(xtcs.begin(),xtcs.end(),x_token_count('0',1020));
   // printf("found = [%c , %zd]\n",find->token_,find->count_);
  }
  printf("times:%f\n",measure::get_times());

  return 0;
}



template
<
    typename T
>
void our_find_if(typename T::iterator beg_,
	typename T::iterator end_,typename T::value_type val)
{
  size_t count_ = 0;    
  
  enum{A,B,C,D,E,F};
  
  typename T::value_type I[F];
  typename T::iterator tmp_;
  while (true)
  {
    
    if (beg_ == end_)
      break;
  
    ++count_;
    ++beg_;
    --end_;
   // std::swap(beg_,tmp_);
//    I[A] = *beg_;  
//    std::swap(beg_,tmp_);
/*
    ++beg_;
    --end_;
    if (beg_ == end_)
      break;
    I[B] = *beg_;  

    ++beg_;
    --end_;
    if (beg_ == end_)
    break;
    I[C] = *beg_;  
    
    ++beg_;
    --end_;
    if (beg_ == end_)
    break;
    
    I[D] = *beg_;  
    
    ++beg_;
    --end_;
    if (beg_ == end_)
    break;
    I[E] = *beg_;  
    
    bool x = ( ( (val==I[A])&&(val==I[B]) )||( (val==I[C])&&(val==I[D]) ) );
    if (x)
    {
        printf("detected=%d\n",x);
    
        break;    
    }
  */ 
  }
 printf("count_ = %zd",count_);
}

template
<
    typename T
>
void our_find_if(typename T::iterator beg_,
	typename T::iterator end_,typename T::value_type val)
{
  size_t count_ = 0;    
  
  enum{A,B,C,D,E,F};
  
  typename T::value_type I[F];
  
  typename T::iterator tmp_;
  while (true)
  {
    
    if (beg_ == end_)
      break;
  
    ++count_;
    ++beg_;
    --end_;
    I[A] = (*beg_);  

    ++beg_;
    --end_;
    if (beg_ == end_)
      break;
    I[B] = (*beg_);  

    ++beg_;
    --end_;
    if (beg_ == end_)
    break;
    I[C] = (*beg_);  
    
    ++beg_;
    --end_;
    if (beg_ == end_)
    break;
    I[D] = (*beg_);  
  
    ++beg_;
    --end_;
    if (beg_ == end_)
    break;
    I[E] = (*beg_); 
    
    ++beg_;
    --end_;
    if (beg_ == end_)
    break;
    I[F] = (*beg_); 
    
    
    bool A_B = (  (val==I[A]) || (val==I[B]) ) ;  
    bool C_D =( (val==I[C]) || (val==I[D]) );
    bool A_B_C_D = (A_B || C_D); 
    if (A_B)
    {
        printf("A_B detected=%d\n",A_B);
        break;    
    }

    if (C_D)
    {
        printf("C_D detected=%d\n",C_D);
        break;    
    }

    if (A_B_C_D)
    {
        printf("A_B_C_D detected=%d\n",A_B_C_D);
        break;    
    }
   
  }
 printf("count_ = %zd",count_);
}


#include <iostream>
#include <vector>
#include <list>
#include <algorithm>

struct x_token_count
{
    x_token_count(){}
  x_token_count (char token, size_t count)
  :token_ (token), count_ (count){}
  
  
  friend bool operator==(const x_token_count& larg,const x_token_count& rarg);
  
  char token_;
  size_t count_;
};

bool operator==(const x_token_count& larg,const x_token_count& rarg)
{
    bool ret_ = false;
    if ((larg.token_ == rarg.token_)&&(larg.count_ == rarg.count_))
    {
      ret_ = true;    
      printf("[%c,%zd]:[%c,%zd]\n",larg.token_,larg.count_,rarg.token_,rarg.count_);
    }
    return (ret_);
}

template
<
  typename T
>
struct find_type:public std::unary_function
< T , bool >
{
    find_type(const T& t_):_t(t_)
    {}

    bool operator()(const T& obj)
    {
      return(_t == obj) ; 
    }
    T _t;
};

struct measure
{
    measure():start(clock()){}
    
    ~measure()
    {
      end = clock();
      times = (double)(end - start);
    }
    
    static 
    double
    get_times(void)
    { return (times); }
    
    clock_t end;
    clock_t start;
    static double times;
};
double measure::times;



template
<
    typename T
>
typename T::iterator
 search(typename T::iterator beg_,
	typename T::iterator end_,typename T::value_type val)
{
  size_t count_ = 0;    
    
    
  
  
  typename T::iterator ret_;
  while (true)
  {
    
    if (beg_ == end_)
    {
       break;
    }
    ++count_;

    ++beg_;
    --end_;
    if (val == (*beg_))
    { ret_ = beg_;
      break;}
    if (val == (*end_))
    { ret_ = end_;
      break;}
    ++beg_;
    --end_;
    if (beg_ == end_)
      break;
    if (val == (*beg_))
    { ret_ = beg_;
      break;}
    if (val == (*end_))
    { ret_ = end_;
      break;}

    ++beg_;
    --end_;
    if (beg_ == end_)
    break;
    if (val == (*beg_))
    { ret_ = beg_;
      break;}
    if (val == (*end_))
    { ret_ = end_;
      break;}

    ++beg_;
    --end_;
    if (beg_ == end_)
    break;
    if (val == (*beg_))
    { ret_ = beg_;
      break;}
    if (val == (*end_))
    { ret_ = end_;
      break;}

    ++beg_;
    --end_;
    if (beg_ == end_)
    break;
    if (val == (*beg_))
    { ret_ = beg_;
      break;}
    if (val == (*end_))
    { ret_ = end_;
      break;}

    ++beg_;
    --end_;
    if (beg_ == end_)
    break;
    if (val == (*beg_))
    { ret_ = beg_;
      break;}
    if (val == (*end_))
    { ret_ = end_;
      break;}

    
  }
// printf("ret_[%c::%zd]",ret_->token_,ret_->count_);
 printf("count_ = %zd",count_);
 return (ret_);
}






int main ()
{
  std::list< x_token_count > xtcs;
  for (size_t i = 0;i<2000000;++i)
  {
    xtcs.push_back (x_token_count ('"', i));
  }
  xtcs.push_back (x_token_count ('X', 32020 ));
  for (size_t i = 0;i<2000000;++i)
  {
    xtcs.push_back (x_token_count ('"', i));
  }
  {
    measure ms;
    
    std::list < x_token_count >::iterator found=
      search<std::list < x_token_count > >(xtcs.begin(),xtcs.end(),x_token_count('X',32020));
      
    printf("found = [%c , %zd]\n",found->token_,found->count_);
  }
  printf("times:%f\n",measure::get_times());

  return 0;
}

